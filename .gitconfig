[core]
    pager = less -FXRS

[color]
    branch = auto
    diff = auto
    status = auto

[alias]
    pr = pull --rebase
    st = status
    ci = commit
    log1 = log --pretty=oneline --decorate
    rbu = rebase @{upstream}
    rest = reset

    # Returns relative path to repo root ("cd up" in absurd git vernacular)
    root = rev-parse --show-cdup

    # Code Review: all commits since last push
    cr = !bash -c \""git log -p --stat --reverse ^$(git merge-base HEAD @{upstream}) HEAD\""

    # diff Cached
    diffc = diff --cached

    # log Full (format)
    logf = log -p --stat

    # fetch and show log of upstream commits
    inbound = !bash -c "\"git fetch; git log -p --stat HEAD..@{upstream}\""

    # Show list of contributors
    contrib = !git log "--pretty=format:'%an %ae%n%cn %ce'" |sort |uniq -c |sort

    # Log, One Line, All (refs) - shows the relationship of all refs in the repository
    lola = log --graph --decorate --pretty=lol --all

    # Log, One Line, outbound - shows the commits on HEAD not on upstream
    lolo = log --graph --decorate --pretty=lol @{upstream}..HEAD

    # Log, One Line, Upstream - shows the relationship of HEAD and upstream
    lolu = log --graph --decorate --pretty=lol HEAD..@{upstream}

    # Log, One Line "Y" format - compares HEAD vs upstream back to the merge point
    loly = !git lol ^$(git merge-base HEAD @{upstream})^@ HEAD @{upstream}

    # (Log, One Line) "Y" format - compares HEAD vs upstream back to the merge point
    y = !git loly

    lolol = log --graph --pretty=lolol --all

    # Log, One Line
    lol = log --oneline --graph --decorate
    olo = log "--pretty=format:%s" --decorate

    # (Log, One Line) "Y" format for arbitrary other commit - compares HEAD vs given commit back to the merge point
    yy = "!f() { git lol ^$(git merge-base HEAD $1)^@ HEAD $1; }; f"

[merge]
	tool = vimdiff

[diff]
	tool = vimdiff
[push]
	default = matching


[user]
	name = Matt Oquist
	email = moquist@majen.net
[credential]
	helper = !aws codecommit credential-helper $@
	UseHttpPath = true
[filter "lfs"]
	process = git-lfs filter-process
	required = true
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
[init]
	defaultBranch = main
